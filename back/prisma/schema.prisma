// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  password  String
  profile   Profile?
  modules   UserModule[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id              BigInt   @id @default(autoincrement())
  name            String
  username        String   @unique
  literacy_level  String
  xp              Float
  avatar          String
  birthday        DateTime
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          BigInt    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Module {
  id          BigInt    @id @default(autoincrement())
  title       String
  description String
  userModules UserModule[]
  activities  Activity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserModule {
  id          BigInt    @id @default(autoincrement())
  userId      BigInt
  moduleId    BigInt
  completed   Boolean
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Activity {
  id          BigInt    @id @default(autoincrement())
  title       String
  description String
  moduleId    BigInt
  module      Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessons     Question[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Question {
  id          BigInt    @id @default(autoincrement())
  question    String
  activityId  BigInt
  activity    Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answers     Answer[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Answer {
  id          BigInt    @id @default(autoincrement())
  answer      String
  questionId  BigInt
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}